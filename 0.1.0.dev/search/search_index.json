{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pypolinsar \u00b6 [![Version](http://img.shields.io/pypi/v/pypolinsar?color=brightgreen)](https://pypi.python.org/pypi/pypolinsar) [![CI Status](https://github.com/Pol-InSAR/pypolinsar/actions/workflows/release.yml/badge.svg)](https://github.com/Pol-InSAR/pypolinsar) [![Dowloads](https://img.shields.io/pypi/dm/pypolinsar)](https://pypi.org/project/pypolinsar/) [![License](https://img.shields.io/pypi/l/pypolinsar)](https://opensource.org/licenses/BSD-2-Clause) ![Python Versions](https://img.shields.io/pypi/pyversions/pypolinsar) [![Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) PyPolInSAR is a Python package designed for PolInSAR (Polarimetric Interferometric Synthetic Aperture Radar) data processing and analysis. It provides a comprehensive set of tools for various PolInSAR applications, such as data visualization, speckle filtering, decomposition, classification, and inversion. With PyPolInSAR, users can easily load, manipulate, and analyze PolInSAR data in Python, making it a valuable tool for researchers and professionals in the field of radar remote sensing. Free software: MIT Documentation: https://Pol-InSAR.github.io/pypolinsar/ Features \u00b6 TODO","title":"home"},{"location":"#pypolinsar","text":"[![Version](http://img.shields.io/pypi/v/pypolinsar?color=brightgreen)](https://pypi.python.org/pypi/pypolinsar) [![CI Status](https://github.com/Pol-InSAR/pypolinsar/actions/workflows/release.yml/badge.svg)](https://github.com/Pol-InSAR/pypolinsar) [![Dowloads](https://img.shields.io/pypi/dm/pypolinsar)](https://pypi.org/project/pypolinsar/) [![License](https://img.shields.io/pypi/l/pypolinsar)](https://opensource.org/licenses/BSD-2-Clause) ![Python Versions](https://img.shields.io/pypi/pyversions/pypolinsar) [![Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) PyPolInSAR is a Python package designed for PolInSAR (Polarimetric Interferometric Synthetic Aperture Radar) data processing and analysis. It provides a comprehensive set of tools for various PolInSAR applications, such as data visualization, speckle filtering, decomposition, classification, and inversion. With PyPolInSAR, users can easily load, manipulate, and analyze PolInSAR data in Python, making it a valuable tool for researchers and professionals in the field of radar remote sensing. Free software: MIT Documentation: https://Pol-InSAR.github.io/pypolinsar/","title":"pypolinsar"},{"location":"#features","text":"TODO","title":"Features"},{"location":"api/","text":"Top-level package for pypolinsar. app \u00b6 Main module. cli \u00b6 Console script for pypolinsar.","title":"modules"},{"location":"api/#pypolinsar.app","text":"Main module.","title":"app"},{"location":"api/#pypolinsar.cli","text":"Console script for pypolinsar.","title":"cli"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Pol-InSAR Pol-InSAR@imansour.net Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Pol-InSAR Pol-InSAR@imansour.net","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/Pol-InSAR/pypolinsar/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 pypolinsar could always use more documentation, whether as part of the official pypolinsar docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/Pol-InSAR/pypolinsar/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started \u00b6 Ready to contribute? Here's how to set up pypolinsar for local development. Fork the pypolinsar repo on GitHub. Clone your fork locally 1 git clone git@github.com:your_name_here/pypolinsar.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 poetry install -E test -E doc -E dev Create a branch for local development: 1 git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 tox Commit your changes and push your branch to GitHub: 1 2 3 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9, 3.10 and for PyPy. Check https://github.com/Pol-InSAR/pypolinsar/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 pytest tests.test_pypolinsar ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass. ```","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/Pol-InSAR/pypolinsar/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"pypolinsar could always use more documentation, whether as part of the official pypolinsar docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/Pol-InSAR/pypolinsar/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up pypolinsar for local development. Fork the pypolinsar repo on GitHub. Clone your fork locally 1 git clone git@github.com:your_name_here/pypolinsar.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 poetry install -E test -E doc -E dev Create a branch for local development: 1 git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 tox Commit your changes and push your branch to GitHub: 1 2 3 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9, 3.10 and for PyPy. Check https://github.com/Pol-InSAR/pypolinsar/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 pytest tests.test_pypolinsar ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass. ```","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2023-05-08) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2023-05-08","text":"First release on PyPI.","title":"0.1.0 (2023-05-08)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install pypolinsar, run this command in your terminal: 1 pip install pypolinsar This is the preferred method to install pypolinsar, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for pypolinsar can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/Pol-InSAR/pypolinsar Or download the tarball : 1 curl -OJL https://github.com/Pol-InSAR/pypolinsar/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install pypolinsar, run this command in your terminal: 1 pip install pypolinsar This is the preferred method to install pypolinsar, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for pypolinsar can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/Pol-InSAR/pypolinsar Or download the tarball : 1 curl -OJL https://github.com/Pol-InSAR/pypolinsar/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use pypolinsar in a project 1 import pypolinsar","title":"usage"},{"location":"usage/#usage","text":"To use pypolinsar in a project 1 import pypolinsar","title":"Usage"}]}